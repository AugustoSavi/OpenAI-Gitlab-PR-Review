import os
import requests
from flask import Flask, request, jsonify, Response
from typing import List, Optional, Dict, Any
from dotenv import load_dotenv
import openai

load_dotenv()

app = Flask(__name__)
openai.api_key = os.environ.get("OPENAI_API_KEY")
gitlab_token = os.environ.get("GITLAB_TOKEN")
gitlab_url = os.environ.get("GITLAB_URL")

def load_questions() -> str:
  with open('questions.txt', 'r') as file:
    return file.read()

def create_review_message(pre_prompt: str, diffs: str, questions: str) -> List[Dict[str, str]]:
  return [
    {"role": "system", "content": "Você é um desenvolvedor sênior revisando alterações de código."},
    {"role": "user", "content": f"{pre_prompt}\n\n{''.join(diffs)}\n\nPerguntas:\n{questions}"},
    {"role": "assistant", "content": "Responda em markdown amigável ao GitLab. Inclua uma versão concisa de cada pergunta em sua resposta."},
  ]


@app.route('/webhook', methods=['POST'])
def webhook() -> tuple[Response, int]:
    if request.headers.get("X-Gitlab-Token") != os.environ.get("EXPECTED_GITLAB_TOKEN"):
      return jsonify({"error": "Unauthorized"}), 403

    payload: Optional[Dict[str, Any]] = request.json
    questions = load_questions()
    if payload is None:
      print("payload is None")
      return jsonify({"error": "Payload invalido"}), 400

    print(payload)
    if payload.get("object_kind") == "merge_request":
      if payload["object_attributes"]["action"] != "open":
        print("object_attributes.action != open")
        return jsonify({"error": "Não abriu um mr"}), 200
        
        project_id = payload["project"]["id"]
        mr_id = payload["object_attributes"]["iid"]
        changes_url = f"{gitlab_url}/api/v4/projects/{project_id}/merge_requests/{mr_id}/changes"

        headers = {"Private-Token": gitlab_token}
        response = requests.get(changes_url, headers=headers)
        if response.status_code != 200:
          print("Erro ao buscar changes")
          return jsonify({"error": "Erro ao buscar changes"}), 502

        try:
          mr_changes = response.json()
        except ValueError:
          print("Erro ao decodificar JSON das changes")
          return jsonify({"error": "Erro ao decodificar JSON"}), 502

        diffs = [change["diff"] for change in mr_changes["changes"]]
        pre_prompt = "Revise as seguintes alterações no código git diff, com foco na estrutura, segurança e clareza."
        messages = create_review_message(pre_prompt, diffs, questions)

        try:
          completions = openai.ChatCompletion.create(
            deployment_id=os.environ.get("OPENAI_API_MODEL"),
            model=os.environ.get("OPENAI_API_MODEL") or "gpt-3.5-turbo",
            temperature=0.2,
            stream=False,
            messages=messages
          )
          answer = completions.choices[0].message["content"].strip()
          answer += "\n\nThis comment was generated by an artificial intelligence duck."
        except Exception as e:
          answer = f"I'm sorry, I'm not feeling well today. Error: {e}"

        comment_url = f"{gitlab_url}/api/v4/projects/{project_id}/merge_requests/{mr_id}/notes"
        comment_payload = {"body": answer}
        comment_response = requests.post(comment_url, headers=headers, json=comment_payload)

        if comment_response.status_code != 201:
            print("Erro ao comentar no merge request")
            return jsonify({"error": "Erro ao comentar no merge request"}), 502
        
        return jsonify({"sucess": "comentado no merge request"}), 200

    elif payload.get("object_kind") == "push":
      project_id = payload["project_id"]
      commit_id = payload["after"]
      commit_url = f"{gitlab_url}/api/v4/projects/{project_id}/repository/commits/{commit_id}/diff"

      headers = {"Private-Token": gitlab_token}
      response = requests.get(commit_url, headers=headers)
      if response.status_code != 200:
        print("Erro na requisição da busca do commit")
        return jsonify({"error": "Erro na requisição"}), 502

      changes = response.json()
      changes_string = ''.join([str(change) for change in changes])
      pre_prompt = "Revise o git diff de um commit recente, focando na clareza, estrutura e segurança."
      messages = create_review_message(pre_prompt, changes_string, questions)

      try:
        completions = openai.ChatCompletion.create( # type: ignore
            deployment_id=os.environ.get("OPENAI_API_MODEL"),
            model=os.environ.get("OPENAI_API_MODEL") or "gpt-3.5-turbo",
            temperature=0.7,
            stream=False,
            messages=messages
        )
        answer = completions.choices[0].message["content"].strip()
        answer += "\n\nThis comment was generated by an artificial intelligence duck."
      except Exception as e:
          print("Erro ao buscar completions", e)
          answer = f"I'm sorry, I'm not feeling well today. Error: {e}"
      comment_url = f"{gitlab_url}/api/v4/projects/{project_id}/repository/commits/{commit_id}/comments"
      comment_payload = {"note": answer}
      comment_response = requests.post(comment_url, headers=headers, json=comment_payload)

      if comment_response.status_code != 201:
        print("Erro ao comentar no commit")
        return jsonify({"error": "Erro ao comentar no commit"}), 502

      return jsonify({"sucess": "comentado no commit"}), 200

    return jsonify({"result ": "object_kind não é suportado"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
